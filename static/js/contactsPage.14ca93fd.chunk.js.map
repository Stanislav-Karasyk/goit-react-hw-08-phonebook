{"version":3,"sources":["components/contactForm/ContactForm.js","redux/contact/contact-operations.js","redux/contact/contact-selectors.js","components/contactList/ContactList.js","components/filter/Filter.js","pages/contactsPage/ContactsPage.js"],"names":["ContactForm","state","name","number","handleInput","e","target","value","setState","handleSubmit","preventDefault","props","onCreateContact","this","fetchContacts","onSubmit","type","onChange","Component","connect","dispatch","a","contact","createContactRequest","axios","post","data","createContactSuccess","createContactError","message","createContact","fetchContactRequest","get","fetchContactSuccess","fetchContactError","getFilter","filter","getLoadind","loading","getFilteredContacts","createSelector","contacts","toLowerCase","includes","deleteContact","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","onHandleChange","className","map","onClick","addFilterValue","ContactsPage"],"mappings":"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","file":"static/js/contactsPage.14ca93fd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {createContact, fetchContacts} from '../../redux/contact/contact-operations';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  componentDidMount (){\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  handleInput = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onCreateContact(this.state);\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form onSubmit={this.handleSubmit} >\r\n        <label>\r\n          Name\r\n          <input\r\n            name=\"name\"\r\n            type=\"text\"\r\n            onChange={this.handleInput}\r\n            value={name}\r\n          />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            name=\"number\"\r\n            type=\"text\"\r\n            onChange={this.handleInput}\r\n            value={number}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Add contacts</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onCreateContact: ({ name, number }) =>\r\n    dispatch(createContact({ name, number })),\r\n  fetchContacts: () => dispatch(fetchContacts())\r\n  });\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  createContactRequest,\r\n  createContactSuccess,\r\n  createContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contact-actions';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error.message));\r\n  }\r\n};\r\n\r\nconst createContact = ({ name, number }) => async dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n  dispatch(createContactRequest());\r\n  try {\r\n    const { data } = await axios.post('/contacts', contact);\r\n    dispatch(createContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(createContactError(error.message));\r\n  }\r\n};\r\n\r\nconst deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error.message));\r\n  }\r\n};\r\n\r\nexport { fetchContacts, createContact, deleteContact };\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = state => state.contact.contacts;\r\n\r\nconst getFilter = state => state.contact.filter;\r\n\r\nconst getLoadind = state => state.contact.loading;\r\n\r\nconst getError = state => state.contact.error;\r\n\r\nconst getFilteredContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) =>\r\n    contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    ),\r\n);\r\n\r\nexport { getContacts, getFilter, getLoadind, getError, getFilteredContacts };\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { deleteContact } from '../../redux/contact/contact-operations';\r\nimport { getError, getFilteredContacts, getLoadind} from '../../redux/contact/contact-selectors';\r\n\r\nconst ContactList = ({ contacts, deleteContact, loading }) => {\r\n  const onHandleChange = e => {\r\n    deleteContact(e.target.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    {loading && <h2>Loading...</h2>}\r\n      <ul className=\"list\">\r\n        {contacts.map(({ name, id, number }) => (\r\n          <li key={id}>\r\n            <p>\r\n              {name}: {number}\r\n              <button id={id} type=\"button\" onClick={onHandleChange}>\r\n                Delete\r\n              </button>\r\n            </p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(deleteContact(id)),\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getFilteredContacts(state),\r\n  loading: getLoadind(state),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addFilterValue } from '../../redux/contact/contact-actions';\r\nimport { getError, getFilter } from '../../redux/contact/contact-selectors';\r\n\r\nconst Filter = ({ filter, addFilterValue }) => {\r\n  const onHandleChange = e => {\r\n    addFilterValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <label>\r\n      Find contacts by name\r\n      <input\r\n        name=\"filter\"\r\n        type=\"text\"\r\n        onChange={onHandleChange}\r\n        value={filter}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addFilterValue: value => dispatch(addFilterValue(value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport ContactForm from '../../components/contactForm/ContactForm';\r\nimport ContactList from '../../components/contactList/ContactList';\r\nimport Filter from '../../components/filter/Filter';\r\n\r\nclass ContactsPage extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Add contacts</h2>\r\n        <ContactForm/>\r\n        <h2>Contacts</h2>\r\n        <Filter/>\r\n        <ContactList/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactsPage;\r\n"],"sourceRoot":""}